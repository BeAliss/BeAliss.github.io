{"version":3,"sources":["stores/alias.tsx","stores/index.tsx","componets/Game/Game.tsx","componets/Game/Round.tsx","componets/StartPage/StartPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["aliasStore","observable","loading","words","gameInfo","currentWord","currentTeam","loadDeviceList","storesContext","React","createContext","useStores","useContext","Game","observer","history","useHistory","className","Typography","variant","component","style","textAlign","List","teams","map","team","i","ListItem","ListItemText","primary","name","points","length","Button","color","fullWidth","marginTop","onClick","countTeams","round","console","log","push","Round","lastWord","test","prompt","Number","parseInt","error","alert","useEffect","timeMinut","timer","setInterval","clearInterval","fontSize","Paper","elevation","transform","StartPage","useState","uv","update","GameInfo","setGameInfo","setName","lang","setLang","complexity","setComplexity","wordCount","setWordCount","gemeStatToLocalStore","a","fetch","response","json","data","result","e","value","Accordion","AccordionSummary","expandIcon","id","AccordionDetails","width","TextField","onChange","target","filter","cursor","splice","display","justifyContent","Select","event","MenuItem","FormHelperText","type","AppRouter","basename","path","exact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfb4b4bc.chunk.js","sourcesContent":["import {observable} from \"mobx\";\r\nimport { GameStats } from '../model/GameStats';\r\n\r\nexport const aliasStore = observable({\r\n    loading: false,\r\n    words:[] as  Array<string>,\r\n    gameInfo: {} as GameStats,\r\n    currentWord: 0,\r\n    currentTeam: -1,\r\n    // get getDeviceList(): Array<IDeviceInfo> {\r\n    //     return this.deviceList;\r\n    // },\r\n\r\n    async loadDeviceList() {\r\n        try {\r\n            // this.deviceList = await deviceService.getDeviceList();\r\n        } catch (errors) {\r\n\r\n        }\r\n    },\r\n});","import React from \"react\";\r\nimport {aliasStore} from \"./alias\";\r\n\r\nconst storesContext = React.createContext({\r\n    aliasStore,\r\n});\r\n\r\nexport const useStores = () => React.useContext(storesContext);","import React, { useState } from 'react';\r\nimport { Button, List, ListItem, ListItemText, Paper, Typography } from '@material-ui/core';\r\nimport { GameStats, Team }from '../../model/GameStats';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStores } from '../../stores';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\n// type GameProps = {\r\n//     words: Array<string>;\r\n//     gameInfo: GameStats;\r\n// }\r\n\r\n\r\n\r\nconst Game = observer(() =>{\r\n    const history = useHistory();\r\n    const{aliasStore} = useStores();\r\n    const roundStart = () =>{\r\n        aliasStore.currentTeam++;\r\n        if(aliasStore.currentTeam+1<=aliasStore.gameInfo.countTeams){\r\n        }\r\n        else{\r\n            aliasStore.currentTeam = 0;\r\n        }\r\n        // if(aliasStore.currentTeam == -1) aliasStore.currentTeam = 0;\r\n        let round = aliasStore.currentTeam;\r\n        console.log(round);\r\n        \r\n        history.push('/round');\r\n    }\r\n\r\n  return (\r\n    <div className=\"\">\r\n        <Typography variant=\"h5\" component=\"h3\" style={{textAlign: 'center'}}>{\"Список команд:\"}</Typography>\r\n        <List>\r\n            {aliasStore.gameInfo.teams.map((team,i)=>{\r\n                return <ListItem key={team.name}>\r\n                    <ListItemText  primary={i+1+\") Название: \"+team.name} />\r\n                    <ListItemText  primary={\"очки: \"+team.points} />\r\n                    </ListItem>\r\n            })}\r\n        </List>\r\n        {aliasStore.currentWord<aliasStore.words.length && <Button variant=\"contained\" color=\"primary\" fullWidth style={{marginTop:10}} onClick={roundStart}>Раунд</Button>}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Game;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, List, ListItem, ListItemText, Paper, Typography } from '@material-ui/core';\r\nimport { GameStats, Team }from '../../model/GameStats';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStores } from '../../stores';\r\nimport { observer } from 'mobx-react-lite';\r\nimport '../../App.sass';\r\nimport NavigationIcon from '@material-ui/icons/Navigation';\r\n\r\n\r\n// type GameProps = {\r\n//     words: Array<string>;\r\n//     gameInfo: GameStats;\r\n// }\r\n\r\n\r\n\r\n\r\nconst Round = observer(() =>{\r\n    const{ aliasStore } = useStores();\r\n    const history = useHistory();\r\n    const lastWord = () =>{\r\n        \r\n        let test = prompt('какая команда отгадала последнее слово (укажите № команды)', '1');\r\n        console.log();\r\n        try {\r\n            aliasStore.gameInfo.teams[Number.parseInt(test||'1')-1].points++;\r\n        } catch (error) {\r\n            alert('ошибка вводе № команды');\r\n            lastWord();\r\n            return;\r\n        }\r\n        aliasStore.currentWord++;\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timeMinut = 1*60;\r\n        let timer = setInterval(()=>{\r\n            if (timeMinut <= 0) {\r\n                clearInterval(timer);\r\n                history.push('/game');\r\n                if(aliasStore.currentWord>=aliasStore.words.length) return;\r\n                alert('Time end')\r\n                lastWord();\r\n            }\r\n            --timeMinut; // Уменьшаем таймер\r\n        }, 1000)\r\n      }, []);\r\n\r\n    const add = ()=>{\r\n        if(aliasStore.currentWord+1>=aliasStore.words.length){\r\n            alert('end words');\r\n            lastWord();\r\n            return;\r\n        }\r\n        aliasStore.currentWord++;\r\n        console.log(aliasStore.currentWord);\r\n        // setWord(words[currentWord]);\r\n        aliasStore.gameInfo.teams.map((team)=>{\r\n            if(team.name==aliasStore.gameInfo.teams[aliasStore.currentTeam].name) team.points++;\r\n            return team;\r\n        });\r\n        console.log(aliasStore.gameInfo);\r\n        \r\n    };\r\n    const next= ()=>{\r\n        if(aliasStore.currentWord+1>=aliasStore.words.length){\r\n            alert('end words');\r\n            lastWord();\r\n            return;\r\n        }\r\n        aliasStore.currentWord++;\r\n        // setWord(words[currentWord]);\r\n        console.log(aliasStore.gameInfo);\r\n    };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"btn\" onClick={add}>\r\n            <NavigationIcon style={{fontSize: '13em', color:'green'}}/>\r\n        </div>\r\n        <Paper className=\"card\" elevation={5}>\r\n            <Typography variant=\"h5\" component=\"h3\">\r\n            {aliasStore.words[aliasStore.currentWord]}\r\n            </Typography>\r\n        </Paper>\r\n        <div className=\"btn\" onClick={next}>\r\n        <NavigationIcon style={{fontSize: '13em',transform: 'rotate(0.5turn)', color: 'red'}}/>\r\n        </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Round;\r\n","import { Accordion, AccordionDetails, AccordionSummary, Button, FormHelperText, List, ListItem, ListItemText, MenuItem, Select, TextField, Typography } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { GameStats } from \"../../model/GameStats\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStores } from \"../../stores\";\r\nimport  Game  from \"../Game/Game\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Round from \"../Game/Round\";\r\n\r\n\r\ntype complexity = 'low'|'normal'|'high';\r\ntype language = 'rus'|'eng';\r\n// type StartPageProps = {\r\n//     setGameWords: any;\r\n//     setGame: any;\r\n// }\r\n\r\nconst StartPage = observer(() => {\r\n    //forseUpdate hack\r\n    const [uv, update] = useState(0);\r\n\r\n    const history = useHistory();\r\n\r\n    const{ aliasStore } = useStores();\r\n\r\n    const [GameInfo, setGameInfo] = useState({\r\n        teams: [],\r\n        countTeams: 0\r\n    } as GameStats);\r\n    const [name, setName] = useState('');\r\n    const [lang, setLang] = React.useState('rus' as language) ;\r\n    const [complexity, setComplexity] = React.useState('low' as complexity);\r\n    const [wordCount, setWordCount] = React.useState(1 as Number);\r\n    \r\n\r\n    const changeLang = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setLang(event.target.value as language);\r\n    };\r\n\r\n    const changeComplexity = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setComplexity(event.target.value as complexity);\r\n    };\r\n\r\n    const changeWordCount= (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        if((event.target.value as Number)>600||(event.target.value as Number)<1){\r\n            alert('некорректное количество слов');\r\n            return;\r\n        }\r\n        setWordCount(event.target.value as Number);\r\n    };\r\n\r\n    const add = ()=>{\r\n        if(name.length<1||GameInfo.teams.filter((e)=>e.name==name).length>0){\r\n            alert('такая команда существует или имя команды не заданно');\r\n            return;\r\n        }\r\n        GameInfo.teams.push({name: name, points: 0});\r\n        GameInfo.countTeams++;\r\n        console.log(GameInfo);\r\n        setGameInfo(GameInfo);\r\n        setName('');\r\n    };\r\n\r\n    const gemeStatToLocalStore = async()=>{\r\n        let response = await fetch(`https://shlyapa-game.ru/api/v1/words?complexity=${complexity}&language=${lang}&limit=${wordCount}&offset=0&rand=true&fields=[\"value\"]`);\r\n        let data = await response.json();\r\n        data = data.result.data.map((e:any)=>e.value);\r\n        aliasStore.words = data;\r\n        aliasStore.gameInfo = GameInfo;\r\n        history.push('/game');\r\n    };\r\n    return <div>\r\n        <Accordion>\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography>Добавить команду</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n            <div style={{width:'100%'}}>\r\n                <TextField fullWidth onChange={(e)=>{ setName(e.target.value)}} value={name} />\r\n                <Button fullWidth style={{marginTop:10}} onClick={add}>Добавить команду</Button>\r\n            </div>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n        \r\n        <Typography variant=\"h5\" component=\"h3\" style={{textAlign: 'center'}}>{\"Список команд:\"}</Typography>\r\n        <List>\r\n            {GameInfo.teams.map((team,i)=>{\r\n                return <ListItem key={team.name}>\r\n                    <ListItemText  primary={\"Название: \"+team.name} />\r\n                    <span \r\n                        style={{cursor: 'pointer'}} \r\n                        onClick={()=>{\r\n                            GameInfo.countTeams--;\r\n                            GameInfo.teams.splice(i, 1); \r\n                            setGameInfo(GameInfo);\r\n                            let n=uv+1;\r\n                            update(n);\r\n                        }}\r\n                    >\r\n                        X\r\n                    </span></ListItem>\r\n            })}\r\n        </List>\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <div>\r\n                <Select\r\n                    value={lang}\r\n                    onChange={changeLang}\r\n                >\r\n                    <MenuItem value={'rus'}>Русский</MenuItem>\r\n                    <MenuItem value={'eng'}>Английский</MenuItem>\r\n                </Select>\r\n                <FormHelperText>Язык слов</FormHelperText>\r\n            </div>\r\n        </div>\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <div>\r\n                <Select\r\n                    value={complexity}\r\n                    onChange={changeComplexity}\r\n                >\r\n                    <MenuItem value={'low'}>Нормальный</MenuItem>\r\n                    <MenuItem value={'normal'}>Не надо(</MenuItem>\r\n                    <MenuItem value={'high'}>Вообще пиздец</MenuItem>\r\n                </Select>\r\n                <FormHelperText>Сложность</FormHelperText>\r\n            </div>\r\n        </div>\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <div>\r\n                <TextField type={'number'} onChange={changeWordCount} value={wordCount} />\r\n                <FormHelperText>количество слов, макс 600</FormHelperText>\r\n            </div>\r\n        </div>\r\n        {GameInfo.countTeams>0 &&<Button variant=\"contained\" color=\"primary\" fullWidth style={{marginTop:10}} onClick={gemeStatToLocalStore}>Старт</Button>}\r\n\r\n    </div>;\r\n});\r\n\r\n\r\nfunction AppRouter() {\r\n    // const [gameWords, setGameWords] = useState([] as Array<string>);\r\n    // const [game, setGame] = useState({} as GameStats);\r\n  return (\r\n    <Router basename=\"bealiss.github.io/alias\">\r\n      <div>\r\n        <Route path=\"/\" exact component={StartPage} />\r\n        <Route path=\"/game\" exact component={Game} />\r\n        {/* <Route path=\"/game\" exact render={()=><Game words={gameWords}/>} /> */}\r\n        <Route path=\"/round\" exact component={Round} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default AppRouter;","import React, { useState } from 'react';\nimport StartPage from './componets/StartPage/StartPage';\nimport { GameStats } from './model/GameStats';\n\ntype complexity = 'low'|'normal'|'high';\ntype language = 'rus'|'eng';\n// interface GameStats {\n//     teams: Array<Team>;\n//     countTeams: number;\n// }\n// interface Team {\n//     name: string;\n//     points: number;\n// }\n//limit-Number, max=600,min=1\n//offset-Number, max=maxCountWordsApi-1,min=0\n//rand-Bool, изпользование рандома, если значение false или не нужно будет возвращатся к текущему поиску слов, параметр randomSeed может быть упущен \nconst maxCountWordsApi = 'https://shlyapa-game.ru/api/v1/words/limit?complexity=high&language=rus';\nconst getWordsApi = 'https://shlyapa-game.ru/api/v1/words?complexity=low&language=rus&limit=5&offset=0&rand=true&randomSeed=977832&fields=[\"value\"]';\n\n// изменяется при старте игры\nconst Game = {\n    teams: [\n        {\n            name: 'vlad',\n            points: 0,\n        },\n        {\n            name: 'dima',\n            points: 0,\n        },\n    ],\n    countTeams: 2\n    \n} as GameStats;\n\n\nfunction App() {\n  return (\n    <StartPage/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\nimport StartPage from './componets/StartPage/StartPage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}